class SparseTable {
	VV st;
	V log;
public:
	SparseTable(V & arr) {
		ll n = arr.size();
		st.clear();
		log.clear();
		st.resize(n, V(25));
		log.resize(n + 2);

		build_log(n + 1);
		build(arr);
	}

	void build(V& arr) {
		ll n = arr.size();

		for (ll i = n - 1 ; i >= 0 ; i--) {
			for (ll j = 0 ; j < 25 ; j++) {
				ll r = i + (1 << j) - 1;
				if (r >= n) break;
				if (j == 0 ) st[i][j] = arr[i];
				else st[i][j] = min(st[i][j - 1] , st[ i + ( 1 << (j - 1) ) ][ j - 1 ] );
			}
		}
	}
	ll query(ll l , ll r) {
		ll w = r - l + 1;
		ll power = log[w];
		return min(st[l][power], st[r - (1 << power) + 1][power]);
	}
	void build_log(ll n) {
		log[1] = 0;
		for (ll i = 2 ; i <= n ; i++) {
			log[i] = 1 + log[i / 2];
		}
	}
};
