class SegmentTree {
	V tree;
	public:
	SegmentTree (V &arr) {
		ll n = arr.size();
		tree.clear();
		tree.resize(4 * n + 1);
		BuildTree(arr, 1, 0, n - 1);
	}
	//BuildTree(arr,1,arr_st,arr_end)
	void BuildTree( V & arr, ll ind, ll s, ll e)
	{
		if (s > e) return;
		if (s == e) //leaf node
		{
			tree[ind] = arr[s];
			return;
		}
		ll mid = (s + e) / 2;
		BuildTree( arr, 2 * ind, s, mid);         //left
		BuildTree( arr, 2 * ind + 1, mid + 1, e); //right
		tree[ind] = min(tree[2 * ind], tree[2 * ind + 1]); //current node
		return;
	}

	//			tree,tree_ind,arr_start,arr_end,query_left,query_right
	ll query(ll ind, ll s, ll e, ll l, ll r)
	{
		if (l > e || r < s) 	           			//no overlap
			return inf;
		if (l <= s && r >= e) return tree[ind];	// complete overlap
		ll mid = (s + e) / 2;
		ll left = query( 2 * ind, s, mid, l, r); //left
		ll right = query( 2 * ind + 1, mid + 1, e, l, r);	 // right
		return min(left, right);						 //current
	}
	//				tree,tree_ind,start,end,arr_ind,new_val
	void updateNode( ll ind, ll s, ll e, ll i, ll val)
	{
		// no overlap
		if (i < s || i > e) return;
		if (s == e) {
			tree[ind] = val;
			return;
		}
		ll mid = (s + e) / 2;
		updateNode( 2 * ind, s, mid, i, val);
		updateNode( 2 * ind + 1, mid + 1, e, i, val);
		tree[ind] = min(tree[2 * ind], tree[2 * ind + 1]);
		return ;
	}

	//			tree,tree_ind,start,end,arr_left,arr_right,new_val
	void updateRange( ll ind, ll s, ll e, ll rs, ll re, ll inc)
	{
		// no overlap
		if (rs > e || re < s) return;
		if (s == e) {
			tree[ind] += inc;
			return;
		}
		ll mid = s + e; mid /= 2;
		updateRange( 2 * ind, s, mid, rs, re, inc);
		updateRange( 2 * ind + 1, mid + 1, e, rs, re, inc);
		tree[ind] = min(tree[2 * ind], tree[2 * ind + 1]);
	}

};
